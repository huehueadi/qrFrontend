{"ast":null,"code":"var _jsxFileName = \"/Users/pro/Desktop/qr-frontend-test/src/QRCodeGenerator.js\",\n  _s = $RefreshSig$();\n// src/QrCodeGenerator.js\nimport { QRCode } from 'qrcode.react';\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst QrCodeGenerator = () => {\n  _s();\n  const [dynamicUrl, setDynamicUrl] = useState('');\n  const [qrCodeUrl, setQrCodeUrl] = useState('');\n  const [notification, setNotification] = useState('');\n  useEffect(() => {\n    // Listen for URL updates via WebSocket\n    socket.on('urlUpdated', newUrl => {\n      setNotification(`The dynamic URL has been updated to: ${newUrl}`);\n    });\n    return () => {\n      socket.off('urlUpdated');\n    };\n  }, []);\n  const handleSetUrl = async () => {\n    const response = await fetch('http://localhost:7000/api/set-dynamic-url', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        url: dynamicUrl\n      })\n    });\n    if (response.ok) {\n      alert('URL updated successfully');\n      generateQrCode();\n    }\n  };\n  const generateQrCode = async () => {\n    const response = await fetch('http://localhost:7000/api/generate-qrcode');\n    const data = await response.json();\n    setQrCodeUrl(data.qrCodeUrl);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"QR Code Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Dynamic URL\",\n      value: dynamicUrl,\n      onChange: e => setDynamicUrl(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSetUrl,\n      children: \"Set Dynamic URL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), qrCodeUrl && /*#__PURE__*/_jsxDEV(QRCode, {\n      value: qrCodeUrl,\n      size: 256\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 27\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(QrCodeGenerator, \"fkr3EfvKA5oXq3pUDmlTcq5bgVc=\");\n_c = QrCodeGenerator;\nexport default QrCodeGenerator;\nvar _c;\n$RefreshReg$(_c, \"QrCodeGenerator\");","map":{"version":3,"names":["QRCode","React","useEffect","useState","io","jsxDEV","_jsxDEV","socket","QrCodeGenerator","_s","dynamicUrl","setDynamicUrl","qrCodeUrl","setQrCodeUrl","notification","setNotification","on","newUrl","off","handleSetUrl","response","fetch","method","headers","body","JSON","stringify","url","ok","alert","generateQrCode","data","json","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","size","_c","$RefreshReg$"],"sources":["/Users/pro/Desktop/qr-frontend-test/src/QRCodeGenerator.js"],"sourcesContent":["// src/QrCodeGenerator.js\nimport { QRCode } from 'qrcode.react';\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:5000');\n\nconst QrCodeGenerator = () => {\n    const [dynamicUrl, setDynamicUrl] = useState('');\n    const [qrCodeUrl, setQrCodeUrl] = useState('');\n    const [notification, setNotification] = useState('');\n\n    useEffect(() => {\n        // Listen for URL updates via WebSocket\n        socket.on('urlUpdated', (newUrl) => {\n            setNotification(`The dynamic URL has been updated to: ${newUrl}`);\n        });\n\n        return () => {\n            socket.off('urlUpdated');\n        };\n    }, []);\n\n    const handleSetUrl = async () => {\n        const response = await fetch('http://localhost:7000/api/set-dynamic-url', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ url: dynamicUrl }),\n        });\n\n        if (response.ok) {\n            alert('URL updated successfully');\n            generateQrCode();\n        }\n    };\n\n    const generateQrCode = async () => {\n        const response = await fetch('http://localhost:7000/api/generate-qrcode');\n        const data = await response.json();\n        setQrCodeUrl(data.qrCodeUrl);\n    };\n\n    return (\n        <div style={{ padding: '20px' }}>\n            <h1>QR Code Generator</h1>\n            <input\n                type=\"text\"\n                placeholder=\"Dynamic URL\"\n                value={dynamicUrl}\n                onChange={(e) => setDynamicUrl(e.target.value)}\n            />\n            <button onClick={handleSetUrl}>Set Dynamic URL</button>\n            {qrCodeUrl && <QRCode value={qrCodeUrl} size={256} />}\n            {notification && <p>{notification}</p>}\n        </div>\n    );\n};\n\nexport default QrCodeGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}